@using Bte.Application
@using Bte.Core
@using Bte.MediatR
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IQueryHandler<GetUserByEmail.Query, ApplicationUser> GetUserByEmailQueryHandler

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div>@userName</div> &nbsp;
            <div>@userEmail</div> &nbsp;
            <a href="/account/logout?ReturnUrl=@currentUrl" >Sign out</a>

        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? currentUrl;
    private string? userEmail;
    private string? userName;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                userEmail = user.Identity.Name;

                GetUserByEmail.Query query = new(userEmail!);

                var result = await GetUserByEmailQueryHandler.Handle(query, CancellationToken.None);
                var appUser = result.IsSuccess ? result.Value : null;
                userName = appUser is null ? "" : $"{appUser.FirstName} {appUser.LastName}";
            }
        }
    }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


}
